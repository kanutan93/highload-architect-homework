version: '3.5'
services:
  primary-service-1:
    container_name: primary-service-1
    image: kanutan93/primary-service:1.0.7
    networks:
      - service
    restart: always
    environment:
      MASTER_DB_URL: 'jdbc:postgresql://db-master:5432/social_network'
      MASTER_DB_USER: 'social_network_user'
      MASTER_DB_PASSWORD: 'password'
      READ_ONLY_SLAVE_ENABLED: 'true'
      SLAVE_DB_URL: 'jdbc:postgresql://haproxy:5000/social_network'
      SLAVE_DB_USER: 'social_network_user'
      SLAVE_DB_PASSWORD: 'password'
      REDIS_HOST: 'redis'
      REDIS_PORT: '6379'
      REDIS_PASSWORD: 'password'
      KAFKA_BOOTSTRAP_SERVERS: 'hl-kafka:9091'
      KAFKA_CONSUMER_GROUP_ID: 'social_network'
      KAFKA_TOPIC: 'posts'

  primary-service-2:
    container_name: primary-service-2
    image: kanutan93/primary-service:1.0.7
    networks:
      - service
    restart: always
    environment:
      MASTER_DB_URL: 'jdbc:postgresql://db-master:5432/social_network'
      MASTER_DB_USER: 'social_network_user'
      MASTER_DB_PASSWORD: 'password'
      READ_ONLY_SLAVE_ENABLED: 'true'
      SLAVE_DB_URL: 'jdbc:postgresql://haproxy:5000/social_network'
      SLAVE_DB_USER: 'social_network_user'
      SLAVE_DB_PASSWORD: 'password'
      REDIS_HOST: 'redis'
      REDIS_PORT: '6379'
      REDIS_PASSWORD: 'password'
      KAFKA_BOOTSTRAP_SERVERS: 'hl-kafka:9091'
      KAFKA_CONSUMER_GROUP_ID: 'social_network'
      KAFKA_TOPIC: 'posts'

  nginx:
    build: ./nginx
    ports:
      - "8080:80"
    networks:
      - service
    depends_on:
      - primary-service-1
      - primary-service-2

  dialog-service:
    container_name: dialog-service
    image: kanutan93/dialog-service:1.0.8
    networks:
      - service
    restart: always
    environment:
      TARANTOOL_HOST: 'tarantool'
      TARANTOOL_PORT: '3301'
      TARANTOOL_USERNAME: 'tarantool'
      TARANTOOL_PASSWORD: 'password'
      KAFKA_BOOTSTRAP_SERVERS: 'hl-kafka:9091'
      KAFKA_CONSUMER_GROUP_ID: 'dialog-service'
      CREATE_UNREAD_MESSAGE_TOPIC: 'create-unread-message-topic'
      DELETE_UNREAD_MESSAGE_TOPIC: 'delete-unread-message-topic'
    ports:
      - "8082:8080"

  counter-service:
    container_name: counter-service
    image: kanutan93/counter-service:1.0.4
    networks:
      - service
    restart: always
    environment:
      TARANTOOL_HOST: 'tarantool'
      TARANTOOL_PORT: '3301'
      TARANTOOL_USERNAME: 'tarantool'
      TARANTOOL_PASSWORD: 'password'
      KAFKA_BOOTSTRAP_SERVERS: 'hl-kafka:9091'
      KAFKA_CONSUMER_GROUP_ID: 'counter-service'
      CREATE_UNREAD_MESSAGE_TOPIC: 'create-unread-message-topic'
      DELETE_UNREAD_MESSAGE_TOPIC: 'delete-unread-message-topic'
    ports:
      - "8083:8080"

  haproxy:
    image: haproxy
    networks:
      - service
    ports:
      - "5000:5000"
    volumes:
      - ./docker/haproxy:/usr/local/etc/haproxy
    depends_on:
      - db-slave1
      - db-slave2

  db-master:
    container_name: db-master
    image: postgres
    networks:
      - service
    restart: always
    environment:
      POSTGRES_DB: 'social_network'
      POSTGRES_USER: 'social_network_user'
      POSTGRES_PASSWORD: 'password'
    volumes:
      - ./docker/postgres/db-master:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  db-slave1:
    container_name: db-slave1
    image: postgres
    networks:
      - service
    restart: always
    environment:
      POSTGRES_DB: 'social_network'
      POSTGRES_USER: 'social_network_user'
      POSTGRES_PASSWORD: 'password'
    volumes:
      - ./docker/postgres/db-slave1:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    depends_on:
      - db-master

  db-slave2:
    container_name: db-slave2
    image: postgres
    networks:
      - service
    restart: always
    environment:
      POSTGRES_DB: 'social_network'
      POSTGRES_USER: 'social_network_user'
      POSTGRES_PASSWORD: 'password'
    volumes:
      - ./docker/postgres/db-slave2:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    depends_on:
      - db-master

  db-dialog:
    container_name: db-dialog
    image: postgres
    networks:
      - service
    restart: always
    environment:
      POSTGRES_DB: 'social_network_dialog'
      POSTGRES_USER: 'social_network_dialog_user'
      POSTGRES_PASSWORD: 'password'
    volumes:
      - ./docker/postgres/db-dialog:/var/lib/postgresql/data
    ports:
      - "5435:5432"
#
#  master:
#    container_name: citus-master
#    image: citusdata/citus:11.3.0
#    labels:
#      - "com.citusdata.role=Master"
#    environment: &AUTH
#      POSTGRES_USER: 'postgres'
#      POSTGRES_PASSWORD: 'password'
#      PGUSER: 'postgres'
#      PGPASSWORD: 'pass'
#      POSTGRES_HOST_AUTH_METHOD: "trust"
#    ports:
#      - "5435:5432"
#  worker:
#    image: citusdata/citus:11.3.0
#    labels:
#      - "com.citusdata.role=Worker"
#    depends_on:
#      - manager
#    environment: *AUTH
#    command: "/wait-for-manager.sh"
#    volumes:
#      - healthcheck-volume:/healthcheck
#  manager:
#    container_name: citus-manager
#    image: citusdata/membership-manager:0.3.0
#    volumes:
#      - '${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock'
#      - healthcheck-volume:/healthcheck
#    depends_on:
#      - master
#    environment: *AUTH

  redis:
    container_name: redis
    image: redis
    networks:
      - service
    restart: always
    environment:
      REDIS_PASSWORD: 'password'
    ports:
      - "6379:6379"

  tarantool:
    container_name: tarantool
    image: tarantool/tarantool
    networks:
      - service
    restart: always
    environment:
      TARANTOOL_USER_NAME: tarantool
      TARANTOOL_USER_PASSWORD: password
    command: tarantool /opt/tarantool/app.lua
    volumes:
      - ./tarantool:/opt/tarantool
#    network_mode: host
    ports:
      - "3301:3301"

  hl-kafka:
    container_name: hl-kafka
    image: confluentinc/cp-kafka:latest
    networks:
      - service
    restart: always
    depends_on:
      - hl-zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://hl-kafka:9091,PLAINTEXT_INTERNAL://localhost:29091
      KAFKA_ZOOKEEPER_CONNECT: hl-zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
    ports:
      - "9091:9091"
      - "29091:29091"

  hl-kafka2:
    container_name: hl-kafka2
    image: confluentinc/cp-kafka:latest
    networks:
      - service
    restart: always
    depends_on:
      - hl-zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://hl-kafka2:9092,PLAINTEXT_INTERNAL://localhost:29092
      KAFKA_ZOOKEEPER_CONNECT: hl-zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
    ports:
      - "9092:9092"
      - "29092:29092"

  hl-kafka3:
    container_name: hl-kafka3
    image: confluentinc/cp-kafka:latest
    networks:
      - service
    restart: always
    depends_on:
      - hl-zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://hl-kafka3:9093,PLAINTEXT_INTERNAL://localhost:29093
      KAFKA_ZOOKEEPER_CONNECT: hl-zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
    ports:
      - "9093:9093"
      - "29093:29093"

  hl-zookeeper:
    container_name: hl-zookeeper
    image: confluentinc/cp-zookeeper:latest
    networks:
      - service
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"


  mysql:
    container_name: mysql
    image: mysql:5.7
    networks:
      - monitoring
    ports:
      - '3306:3306'
    volumes:
      - './zabbix/mysql:/var/lib/data'
    environment:
      - MYSQL_ROOT_PASSWORD=zabbix
      - MYSQL_DATABASE=zabbix
      - MYSQL_USER=zabbix
      - MYSQL_PASSWORD=zabbix
      - LANG=C.UTF-8
    command: --character-set-server=utf8 --collation-server=utf8_bin

  zabbix-server:
    container_name: zabbix-server
    image: zabbix/zabbix-server-mysql:ubuntu-5.0.1
    networks:
      - monitoring
    restart: always
    ports:
      - '10051:10051'
    volumes:
      - './zabbix/alertscripts:/usr/lib/zabbix/alertscripts'
    environment:
      - DB_SERVER_HOST=mysql
      - MYSQL_DATABASE=zabbix
      - MYSQL_USER=zabbix
      - MYSQL_PASSWORD=zabbix
    depends_on:
      - mysql

  zabbix-frontend:
    container_name: zabbix-frontend
    image: zabbix/zabbix-web-apache-mysql:ubuntu-5.0.1
    networks:
      - monitoring
    restart: always
    ports:
      - '9080:8080'
      - '9443:8443'
    environment:
      - DB_SERVER_HOST=mysql
      - MYSQL_DATABASE=zabbix
      - MYSQL_USER=zabbix
      - MYSQL_PASSWORD=zabbix
    depends_on:
      - mysql

  grafana:
    container_name: grafana
    image: grafana/grafana
    networks:
      - monitoring
    restart: always
    ports:
      - '3000:3000'
    environment:
      - GF_INSTALL_PLUGINS=alexanderzobnin-zabbix-app
    depends_on:
      - mysql
      - zabbix-server
      - zabbix-frontend


  zabbix-agent:
    container_name: zabbix-agent
    image: zabbix/zabbix-agent2:alpine-5.0.1
    user: root
    networks:
      - monitoring
    restart: always
    privileged: true
    volumes:
      - /var/run:/var/run
    ports:
      - '10050:10050'
    environment:
      - ZBX_HOSTNAME=Zabbix server
      - ZBX_SERVER_HOST=zabbix-server

  prometheus:
    image: prom/prometheus
    volumes:
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"
    networks:
      - monitoring
      - service
    ports:
      - '9090:9090'

networks:
  service:
    driver: bridge
  monitoring:
    driver: bridge

volumes:
  healthcheck-volume:
